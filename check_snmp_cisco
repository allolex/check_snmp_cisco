#!/usr/bin/perl -w
# ============================================================================
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
#
# ============================================================================
# Portions Copyright (C) R3dL!GhT 2007.
# Modifications Copyright (C) 2008 Martin Fuerstenau, mf_at_maerber.de
#
# Purpose:
# SNMP check for cisco devices (routers/switches) returning state of different interfaces.
#
# Changes:
#
# - 15.1.2010 - Damon Allen Davison
#   Added support for cache storage using Storable.
#   Reduced number of system calls
#   Optimised interface lookup
#   Changed usage and help messages to heredocs
#   Made help argument return help
#   Ran through perltidy -gnu
# - 18.5.2009 - Martin Fuerstenau
#   Bugfix - The cachefile was not generated when the original one was deleted
# - 25.7.2008 - Martin Fuerstenau (JeanLuc)
#   On bigger switches the plugin was too slow due to the fact that it did multiple snmpwalks
#   On a switch with over 350 ports that caused a timeout in Nagios.
#
#   Problem was solved by implementing a cache mechanism. This was done in the following manner.
#
#   You need a directory for the cache files. It is best to do it with a tmpfs because a tmpfs is
#   opposite to a ramdisk swapable.
#
#   Sample entry from /etc/fstab:
#
#   tmpfs                    /var/nagios_plugin_cache       tmpfs   defaults        0 0
#
#   Please change variable $CachePath for a different location
#
#   Unforunately I use some systemcalls for executing system commands. This is a little bit dirty
#   but every snmp call in this script was done be a system call instead of using perl. A complete
#   rewrite was too much work for the time I had to solve my problems.
#
#   The function snmpwalkgrep, snmpwalk and some lines of code were kicked out because they were
#   no longer necessary
#
#   The script does a find in the cache directory for the cache file. If it is too old (-mtime) or
#   not existent it will be generated. OIDs, interface names and descriptions are store in the cache
#   That means the double walk will be done only every 2 days instead of every run
#
# Synopsis:
#
# check_cisco_snmp -H ip -C community -I interface -S state (optional)
#
# ============================================================================

###################Setting up some parameters#########################

use strict;
use Getopt::Long;
use Storable;

my $debug = undef;

my $UNKNOWN          = -1;
my $OK              = 0;
my $WARNING         = 1;
my $CRITICAL        = 2;
my $state           = "up";
my $host            = "";
my $HELP            = "";
my $community       = "public";
my $warning         = "1000";
my $critical        = "2000";
my $interface       = "";
my $MIBifDescr      = "IF-MIB::ifDescr";
my $MIBifOper       = "IF-MIB::ifOperStatus";
my $MIBifName       = "IF-MIB::ifName";
my $MIBifLastChange = "IF-MIB::ifLastChange";
my $MIBTrafficIn    = "IF-MIB::ifInOctets";
my $MIBTrafficOut   = "IF-MIB::ifOutOctets";
my $MIBDescription  = "IF-MIB::ifAlias";

my $CachePath   = "/var/tmp/nagios/";    # with trailing slash
my $GENERATE_IT = 0;
my $Cache_Valid = "";

sub wanted;

###################Getting options##############################

Getopt::Long::Configure('bundling');

GetOptions(
           "host|H=s"      => \$host,
           "community|C=s" => \$community,
           "interface|I=s" => \$interface,
           "help"          => \$HELP,
           "h"             => \$HELP,
           "state|S=s"     => \$state
          );
chomp($host);
chomp($community);
chomp($interface);
chomp($state);

################### Check input ##############################################

if ($HELP)
{
    print_help();
    exit 0;
}

if (!$host)
{
    print "\nHostname/address not specified\n\n";
    print_usage();
    exit 2;
}

if (!$interface)
{
    print "\nInterface not specified\n\n";
    print_usage();
    exit 2;
}

################### Setting up the cache ##############################################

my $CacheFile    = $CachePath . $host . "_cache";
my $CacheFileTmp = $CachePath . $host . "_cache.tmp";

# The interface lookup info is stored in a cache file

my $iface;

system("find $CacheFile -mtime +99 2>/dev/null");    # We need a current cache

my $err = $? >> 8;    # Get the error value, should be zero

if ($err == 0)
{

    $iface = retrieve("$CacheFile");

}
else
{    # Take what snmpwalk returns and convert it to an interface lookup hash

    my $walk_results = `snmpwalk -c $community -v 2c $host IF-MIB::ifDescr`;

    my @walk_lines = split /\n/, $walk_results;

    my %interfaces;

    foreach (@walk_lines)
    {
        m!ifDescr\.(\d+)[^:]+:\s*"([^"]+)"!;
        $interfaces{$2} = $1;
    }

    $iface = \%interfaces;

    if (store \%interfaces, "$CacheFile")
    {
        print "New cache stored as $CacheFile\n" if $debug;
    }
    else
    {
        warn "Cache error while storing: $CacheFile\n";
    }

}

my $oid = $iface->{$interface};

my $tree = "IF-MIB::ifOperStatus.$oid";
my $return = snmpget($host, $community, $tree);

warn "snmpget($host, $community, $tree) failed\n" unless $return;

if ($return =~ /up/ && $state eq "up")
{
    my $LastChange =
      snmpget($host, $community, "$MIBifLastChange" . "\." . $oid);
    my $Alias     = snmpget($host, $community, "$MIBDescription" . "\." . $oid);
    my $TrafficIn = snmpget($host, $community, "$MIBTrafficIn" . "\." . $oid);
    my $TrafficOut = snmpget($host, $community, "$MIBTrafficOut" . "\." . $oid);
    my $LastChangeCleaned = CleanMe($LastChange);
    my $AliasCleaned      = CleanMe($Alias);
    my $TrafficInCleaned  = CleanMe($TrafficIn);
    my $TrafficOutCleaned = CleanMe($TrafficOut);
    print
      "$interface up: $AliasCleaned, LastChanges: $LastChangeCleaned, Traffic in : $TrafficInCleaned octets, out: $TrafficOutCleaned octets\n";
    exit $OK;
}

if ($return =~ /down/ && $state eq "up")
{
    print "$interface is down\n";
    exit $CRITICAL;
}

if ($return =~ /down/ && $state eq "down")
{
    print "$interface down : ok\n";
    exit $OK;
}

if ($return =~ /up/ && $state eq "down")
{
    print "$interface should not be up\n";
    exit $CRITICAL;
}

if (   $return =~ /dormant/ && $state eq "down"
    || $return =~ /dormant/ && $state eq "up")
{
    print "Error : $interface is sleeping\n";
    exit $CRITICAL;
}

if ($return =~ /dormant/ && $state eq "dormant")
{
    print "$interface is sleeping : ok\n";
    exit $OK;
}

if ($return =~ /up/ && $state eq "dormant")
{
    print "$interface is up and should be sleeping\n";
    exit $CRITICAL;
}
else
{
    print "Unknown state for $interface : check your -s state syntax\n";
    print "(returned: '$return' - $host $interface $community $state)\n";
    exit $UNKNOWN;
}

sub CleanMe
{
    my $input = $_[0];
    if ($input =~ /: (.*)/)
    {
        my $return = $1;
        chomp($return);
        return $return;
    }
}

sub snmpget
{
    my ($host, $community, $tree) = @_;
    my $get = `snmpget -v 1 -c $community $host $tree`;
    chomp($get);
    print STDERR $get;
    return $get;
}

sub print_usage
{
print <<EOP;
    Usage: 
    
        check_cisco_snmp -H ip -C community -I interface [-S state] 

    or get help with
    
        check_cisco_snmp -h


EOP
}

sub print_help
{
print<<EOP;
    Copyright (c) 2008 Martin Fuerstenau
    Portions Copyright (C) R3dL!GhT 2007

    SNMP check for cisco devices (routers/switches) returning state of different interfaces


EOP

    print_usage();
    
print<<EOP;

           -H or --host        Set here the ip of your host
           -C or --community   Set here your own community
           -I or --interface   Set here the interface u want to check (Use the same syntax as
                               for cisco devices, for exemple FastEthernet1/0/1, Fa2/0/3 or Fa0)
           -S or --state       Set the state of your interface. Options are : up/down/dormant
           -h, --help          Short help message
    


    Examples


    Is Fa2/0/1 up on your switch ?
        
        check_cisco_snmp -H 192.168.0.1 -C public -I Fa2/0/1
    
        or
        
        check_cisco_snmp -H 192.168.0.1 -C public -I FastEthernet2/0/1


    To check your FastEthernet0 is down on your router :

        check_cisco_snmp -H 192.168.0.1 -C MyCommunity -I FastEthernet0 (or Fa0) -S down


    To check your Backup RNIS BRIO:1 is dormant on your router:

        check_cisco_snmp -H 192.168.0.1 -C MyCommunity -I BRI0:1 -S down

    State option are : up (-S up), down (-S down), dormant (-S dormant). State is set to up if not defined.

    This plugin uses the CPAN modules Net::SNMP and Storable.

EOP
}
